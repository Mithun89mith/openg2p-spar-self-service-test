{
	"info": {
		"_postman_id": "f0244762-66e1-4e06-8657-27a7a0a9f221",
		"name": "openg2p-spar-self-service-api",
		"description": "\n    SPAR Self Service API\n    ***********************************\n    Further details goes here\n    ***********************************\n    \n\nContact Support:\n Email: info@openg2p.org",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15110875"
	},
	"item": [
		{
			"name": "dfsp",
			"item": [
				{
					"name": "Get Dfsp Level",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"request_header\": {},\n  \"request_pagination\": {\n    \"request_page\": \"0\",\n    \"page_size\": \"0\"\n  },\n  \"request_payload\": {\n    \"parent\": \"0\"     // dfsp level will be fetched based on parent\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/dfsp/getLevels",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dfsp",
								"getLevels"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Dfsp Level Values",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"request_header\": {},\n  \"request_pagination\": {\n    \"request_page\": \"0\",\n    \"page_size\": \"0\"\n  },\n  \"request_payload\": {\n    \"level_id\": \"4\",\n    \"parent\": \"0\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/dfsp/getLevelValues",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dfsp",
								"getLevelValues"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "selfservice",
			"item": [
				{
					"name": "/selfservide/test_strategy",
					"item": [
						{
							"name": "test strategy for bank account fa",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Field 'constructed_fa' should not be null\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.constructed_fa).to.exist; \r",
											"    pm.expect(jsonData.constructed_fa).to.not.be.null; \r",
											"});\r",
											"pm.test(\"Field 'constructed_id' should not be null\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.constructed_id).to.exist; \r",
											"    pm.expect(jsonData.constructed_id).to.not.be.null; \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"request_header\": {},\n\t\"request_pagination\": {\n\t\t\"request_page\": 0,\n\t\t\"page_size\": 0\n\t},\n\t\"request_payload\": {\n\t\t\"fa\": {\n\t\t\t\"bank_name\": \"HDFC Bank\",\n\t\t\t\"strategy_id\": 2,\n\t\t\t\"bank_code\": \"Canara\",\n\t\t\t\"branch_name\": \"Mumbai\",\n\t\t\t\"branch_code\": \"MUM1235\",\n\t\t\t\"account_number\": \"1234567891\",\n\t\t\t\"fa_type\": \"bank\"\n\t\t}\n\t},\n\t\"name\": \"string\",\n\t\"phone_number\": \"string\",\n\t\"additional_info\": [{}]\n\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/selfservice/test_strategy",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"selfservice",
										"test_strategy"
									]
								}
							},
							"response": []
						},
						{
							"name": "test strategy for mobile wallet fa",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Field 'constructed_fa' should not be null\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.constructed_fa).to.exist; \r",
											"    pm.expect(jsonData.constructed_fa).to.not.be.null; \r",
											"});\r",
											"pm.test(\"Field 'constructed_id' should not be null\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.constructed_id).to.exist; \r",
											"    pm.expect(jsonData.constructed_id).to.not.be.null; \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\"request_header\": {},\r\n\t\"request_pagination\": {\r\n\t\t\"request_page\": 0,\r\n\t\t\"page_size\": 0\r\n\t},\r\n\t\"request_payload\": {\r\n\t\t\"fa\": {\r\n\t\t\t\"wallet_provider_name\": \"Mobile Wallet\",\r\n\t\t\t\"strategy_id\": 4,\r\n\t\t\t\"wallet_provider_code\": \"TMOB\",\r\n\t\t\t\"mobile_number\": \"9090909090\",\r\n\t\t    \"fa_type\": \"mobile_wallet_provider\"\r\n\t\t}\r\n\t},\r\n\t\"name\": \"string\",\r\n\t\"phone_number\": \"string\",\r\n\t\"additional_info\": [{}]\r\n\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/selfservice/test_strategy",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"selfservice",
										"test_strategy"
									]
								}
							},
							"response": []
						},
						{
							"name": "test strategy for email wallet fal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Field 'constructed_fa' should not be null\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.constructed_fa).to.exist; \r",
											"    pm.expect(jsonData.constructed_fa).to.not.be.null; \r",
											"});\r",
											"pm.test(\"Field 'constructed_id' should not be null\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.constructed_id).to.exist; \r",
											"    pm.expect(jsonData.constructed_id).to.not.be.null; \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\"request_header\": {},\r\n\t\"request_pagination\": {\r\n\t\t\"request_page\": 0,\r\n\t\t\"page_size\": 0\r\n\t},\r\n\t\"request_payload\": {\r\n\t\t\"fa\": {\r\n\t\t\t\"wallet_provider_name\": \"Email Wallet\",\r\n\t\t\t\"strategy_id\": 3,\r\n\t\t\t\"wallet_provider_code\": \"PAYPAL\",\r\n\t\t\t\"email_address\": \"9090909090@paypal.com\",\r\n\t\t    \"fa_type\": \"email_wallet_provider\"\r\n\t\t}\r\n\t},\r\n\t\"name\": \"string\",\r\n\t\"phone_number\": \"string\",\r\n\t\"additional_info\": [{}]\r\n\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/selfservice/test_strategy",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"selfservice",
										"test_strategy"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/selfservice/link",
					"item": [
						{
							"name": "link with valid details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response status matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"request_header\": {},\n\t\"request_pagination\": {\n\t\t\"request_page\": 0,\n\t\t\"page_size\": 0\n\t},\n\t\"request_payload\": {\n\t\t\"fa\": {\n\t\t\t\"bank_name\": \"HDFC Bank\",\n\t\t\t\"strategy_id\": 2,\n\t\t\t\"bank_code\": \"Canara\",\n\t\t\t\"branch_name\": \"Mumbai\",\n\t\t\t\"branch_code\": \"MUM1235\",\n\t\t\t\"account_number\": \"1234567891\",\n\t\t\t\"fa_type\": \"bank\"\n\t\t}\n\t},\n\t\"name\": \"string\",\n\t\"phone_number\": \"string\",\n\t\"additional_info\": [{}]\n\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/selfservice/link",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"selfservice",
										"link"
									]
								}
							},
							"response": []
						},
						{
							"name": "link with invalid fa type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"error message matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Input. Input should be 'bank', 'branch', 'account', 'mobile_wallet_provider', 'mobile_number', 'email_wallet_provider' or 'email_address'\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"request_header\": {},\r\n\t\"request_pagination\": {\r\n\t\t\"request_page\": 0,\r\n\t\t\"page_size\": 0\r\n\t},\r\n\t\"request_payload\": {\r\n\t\t\"fa\": {\r\n\t\t\t\"bank_name\": \"HDFC Bank\",\r\n\t\t\t\"strategy_id\": 2,\r\n\t\t\t\"bank_code\": \"Canara\",\r\n\t\t\t\"branch_name\": \"Mumbai\",\r\n\t\t\t\"branch_code\": \"MUM1235\",\r\n\t\t\t\"account_number\": \"1234567891\",\r\n\t\t\t\"fa_type\": \"string\"\r\n\t\t}\r\n\t},\r\n\t\"name\": \"string\",\r\n\t\"phone_number\": \"string\",\r\n\t\"additional_info\": [{}]\r\n\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/selfservice/link",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"selfservice",
										"link"
									]
								}
							},
							"response": []
						},
						{
							"name": "link with invalid strategy id",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"request_header\": {},\r\n\t\"request_pagination\": {\r\n\t\t\"request_page\": 0,\r\n\t\t\"page_size\": 0\r\n\t},\r\n\t\"request_payload\": {\r\n\t\t\"fa\": {\r\n\t\t\t\"bank_name\": \"HDFC Bank\",\r\n\t\t\t\"strategy_id\": 1,\r\n\t\t\t\"bank_code\": \"Canara\",\r\n\t\t\t\"branch_name\": \"Mumbai\",\r\n\t\t\t\"branch_code\": \"MUM1235\",\r\n\t\t\t\"account_number\": \"1234567891\",\r\n\t\t\t\"fa_type\": \"bank\"\r\n\t\t}\r\n\t},\r\n\t\"name\": \"string\",\r\n\t\"phone_number\": \"string\",\r\n\t\"additional_info\": [{}]\r\n\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/selfservice/link",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"selfservice",
										"link"
									]
								}
							},
							"response": []
						},
						{
							"name": "link with missing field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Input. Field required\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"request_header\": {},\r\n\t\"request_pagination\": {\r\n\t\t\"request_page\": 0,\r\n\t\t\"page_size\": 0\r\n\t},\r\n\t\"request_payload\": {\r\n\t\t\"fa\": {\r\n\t\t\t\"bank_name\": \"HDFC Bank\",\r\n\t\t\t\"strategy_id\": 1,\r\n\t\t\t\"bank_code\": \"Canara\",\r\n\t\t\t\r\n\t\t\t\"branch_code\": \"MUM1235\",\r\n\t\t\t\"account_number\": \"1234567891\",\r\n\t\t\t\"fa_type\": \"bank\"\r\n\t\t}\r\n\t},\r\n\t\"name\": \"string\",\r\n\t\"phone_number\": \"string\",\r\n\t\"additional_info\": [{}]\r\n\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/selfservice/link",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"selfservice",
										"link"
									]
								}
							},
							"response": []
						},
						{
							"name": "link already mapped id and fa",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"response status matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"failure\");\r",
											"});\r",
											"pm.test(\"Response message matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ID and FA are already mapped\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"request_header\": {},\r\n\t\"request_pagination\": {\r\n\t\t\"request_page\": 0,\r\n\t\t\"page_size\": 0\r\n\t},\r\n\t\"request_payload\": {\r\n\t\t\"fa\": {\r\n\t\t\t\"bank_name\": \"HDFC Bank\",\r\n\t\t\t\"strategy_id\": 2,\r\n\t\t\t\"bank_code\": \"Canara\",\r\n\t\t\t\"branch_name\": \"Mumbai\",\r\n\t\t\t\"branch_code\": \"MUM1235\",\r\n\t\t\t\"account_number\": \"1234567891\",\r\n\t\t\t\"fa_type\": \"bank\"\r\n\t\t}\r\n\t},\r\n\t\"name\": \"string\",\r\n\t\"phone_number\": \"string\",\r\n\t\"additional_info\": [{}]\r\n\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/selfservice/link",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"selfservice",
										"link"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/selfservice/update",
					"item": [
						{
							"name": "update with valid details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response status matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"request_header\": {},\n\t\"request_pagination\": {\n\t\t\"request_page\": 0,\n\t\t\"page_size\": 0\n\t},\n\t\"request_payload\": {\n\t\t\"fa\": {\n\t\t\t\"bank_name\": \"HDFC Bank\",\n\t\t\t\"strategy_id\": 2,\n\t\t\t\"bank_code\": \"Canara\",\n\t\t\t\"branch_name\": \"Mumbai\",\n\t\t\t\"branch_code\": \"MUM1235\",\n\t\t\t\"account_number\": \"1234567891\",\n\t\t\t\"fa_type\": \"bank\"\n\t\t}\n\t},\n\t\"name\": \"string\",\n\t\"phone_number\": \"string\",\n\t\"additional_info\": [{}]\n\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/selfservice/update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"selfservice",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "update with invalid fa type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"error message matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Input. Input should be 'bank', 'branch', 'account', 'mobile_wallet_provider', 'mobile_number', 'email_wallet_provider' or 'email_address'\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"request_header\": {},\r\n\t\"request_pagination\": {\r\n\t\t\"request_page\": 0,\r\n\t\t\"page_size\": 0\r\n\t},\r\n\t\"request_payload\": {\r\n\t\t\"fa\": {\r\n\t\t\t\"bank_name\": \"HDFC Bank\",\r\n\t\t\t\"strategy_id\": 2,\r\n\t\t\t\"bank_code\": \"Canara\",\r\n\t\t\t\"branch_name\": \"Mumbai\",\r\n\t\t\t\"branch_code\": \"MUM1235\",\r\n\t\t\t\"account_number\": \"1234567891\",\r\n\t\t\t\"fa_type\": \"string\"\r\n\t\t}\r\n\t},\r\n\t\"name\": \"string\",\r\n\t\"phone_number\": \"string\",\r\n\t\"additional_info\": [{}]\r\n\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/selfservice/update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"selfservice",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "update with invalid strategy id",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"request_header\": {},\r\n\t\"request_pagination\": {\r\n\t\t\"request_page\": 0,\r\n\t\t\"page_size\": 0\r\n\t},\r\n\t\"request_payload\": {\r\n\t\t\"fa\": {\r\n\t\t\t\"bank_name\": \"HDFC Bank\",\r\n\t\t\t\"strategy_id\": 1,\r\n\t\t\t\"bank_code\": \"Canara\",\r\n\t\t\t\"branch_name\": \"Mumbai\",\r\n\t\t\t\"branch_code\": \"MUM1235\",\r\n\t\t\t\"account_number\": \"1234567891\",\r\n\t\t\t\"fa_type\": \"bank\"\r\n\t\t}\r\n\t},\r\n\t\"name\": \"string\",\r\n\t\"phone_number\": \"string\",\r\n\t\"additional_info\": [{}]\r\n\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/selfservice/update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"selfservice",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "update with missing field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Input. Field required\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"request_header\": {},\r\n\t\"request_pagination\": {\r\n\t\t\"request_page\": 0,\r\n\t\t\"page_size\": 0\r\n\t},\r\n\t\"request_payload\": {\r\n\t\t\"fa\": {\r\n\t\t\t\"bank_name\": \"HDFC Bank\",\r\n\t\t\t\"strategy_id\": 1,\r\n\t\t\t\"bank_code\": \"Canara\",\r\n\t\t\t\r\n\t\t\t\"branch_code\": \"MUM1235\",\r\n\t\t\t\"account_number\": \"1234567891\",\r\n\t\t\t\"fa_type\": \"bank\"\r\n\t\t}\r\n\t},\r\n\t\"name\": \"string\",\r\n\t\"phone_number\": \"string\",\r\n\t\"additional_info\": [{}]\r\n\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/selfservice/update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"selfservice",
										"update"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/selfservice/resolve",
					"item": [
						{
							"name": "fetch details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Field 'account_number' should not be null\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.account_number).to.exist; \r",
											"    pm.expect(jsonData.account_number).to.not.be.null; \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/selfservice/resolve",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"selfservice",
										"resolve"
									]
								}
							},
							"response": []
						},
						{
							"name": "fetch details without mapping id and fa",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ID doesnt exist please link first\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/selfservice/resolve",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"selfservice",
										"resolve"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/selfservice/unlink",
					"item": [
						{
							"name": "unlink",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"response status matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/selfservice/unlink",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"selfservice",
										"unlink"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "auth",
			"item": [
				{
					"name": "/auth/profile",
					"item": [
						{
							"name": "get profile with boolean as false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"openg2p-selfservice-client\");\r",
											"});\r",
											"pm.test(\"Field 'name' should not be null\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.exist; \r",
											"    pm.expect(jsonData.name).to.not.be.null; \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/profile?online=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"profile"
									],
									"query": [
										{
											"key": "online",
											"value": "false"
										}
									]
								},
								"description": "Get Profile Data of the authenticated user/entity.\nThis can also be used to check whether or not the Authentication is present and valid.\n- Authentication required.\n- If online is true, the server will try to userinfo from original Authorization Server.\n  Else it will return the information present in ID Token and Access token."
							},
							"response": []
						},
						{
							"name": "get profile with boolean as true",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/auth/profile?online=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"profile"
									],
									"query": [
										{
											"key": "online",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get profile with boolean as empty",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/auth/profile?online",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"profile"
									],
									"query": [
										{
											"key": "online",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get profile(unauthorised))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"error message matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Unauthorized. Invalid Jwt. ExpiredSignatureError('Signature has expired.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/auth/profile?online=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"profile"
									],
									"query": [
										{
											"key": "online",
											"value": "false"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/auth/logout",
					"item": [
						{
							"name": "logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonResponse = pm.response.json();\r",
											"pm.environment.set(\"bearerToken\", jsonResponse);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"logout"
									]
								},
								"description": "Perform Logout. This clears the Access Tokens and ID Tokens from cookies.\n- Authentication not mandatory."
							},
							"response": []
						}
					]
				},
				{
					"name": "/auth/getLoginProviders",
					"item": [
						{
							"name": "get login providers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Display name matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"key_cloak\");\r",
											"});\r",
											"pm.test(\"Display name matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"e_signet\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/getLoginProviders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"getLoginProviders"
									]
								},
								"description": "Get available Login Providers List. Can also be used to display login providers on UI.\nUse getLoginProviderRedirect API to redirect to this Login Provider to perform login."
							},
							"response": []
						}
					]
				},
				{
					"name": "/auth/getLoginProviderRedirect/{id}",
					"item": [
						{
							"name": "get login provider redirect",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/getLoginProviderRedirect/:id?redirect_uri=/api/docs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"getLoginProviderRedirect",
										":id"
									],
									"query": [
										{
											"key": "redirect_uri",
											"value": "/api/docs"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"description": "(Required) "
										}
									]
								},
								"description": "Redirect URL to redirect to the Login Provider's Authorization URL\nbased on the id of login provider given."
							},
							"response": []
						},
						{
							"name": "authentication",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonResponse = pm.response.json();\r",
											"var accessToken = jsonResponse.access_token;\r",
											"pm.environment.set(\"bearerToken\", accessToken);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{clientId}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{clientSecret}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "{{grantType}}",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{Username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{Password}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://keycloak.dev.openg2p.net/realms/openg2p/protocol/openid-connect/token",
									"protocol": "https",
									"host": [
										"keycloak",
										"dev",
										"openg2p",
										"net"
									],
									"path": [
										"realms",
										"openg2p",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "/api",
			"type": "string"
		}
	]
}